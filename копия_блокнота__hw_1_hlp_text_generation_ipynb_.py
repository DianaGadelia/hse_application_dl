# -*- coding: utf-8 -*-
"""Копия блокнота "HW_1_HLP_text_generation.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TNqMCLMywudm8zPL9NVALhOuHgiYUvYo

<a href="https://colab.research.google.com/github/zaaabik/hse/blob/master/application_dl/nlp_hw_1/HW_1_HLP_text_generation.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>
"""



"""## Генерация текста

В первом домашнем задании мы с вами попробуем побыть писателями. Ваша задача построить алгоритм, который будет генерировать текст похожий на текст какого-либо известного писателя.

**Задание** 

N-gram model (3 балла)
* Препроцессинг текста с помощью NLTK (или любой подобной библиотеки)
* Разбиение train/test
* Построить модель на основе n-gram на train выборке
* Сгенерировать текст и посмотреть качество генерации на test выборки (perplexity)

GPT2 (5 баллов)
* Разбиение train/test
* Взять предобученый токенайзер gpt2
* Дообучить модель на основе gpt2 train выборка
* Сгенерировать текст и посмотреть качество генерации на test выборки (perplexity)

Отправка решения:
* Отправить ссылку на обученную модель в формате https://huggingface.co/*ваш_ник*/gpt2-arxiv-clm
* Отправить github ссылку на ноутбук c решением https://github.com/*ваш_ник*/hse_application_dl

!! **Большинство кода уже написано в семинаре Language_modeling_solved.ipynb** !!
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tqdm.notebook import tqdm
# %matplotlib inline

import nltk
nltk.download('punkt')

nltk.download('stopwords')

from google.colab import drive
drive.mount('/content/drive')

"""### Найти текст
Первый шаг для построения любой модели машинного обучения это поиск данных. Вам необходимо найти корпус текста писателя (на английском языке). Размер источника произвольный, но чем больше тем лучше. Желательно найти книгу или набор книг в текстовом формате.
"""

### Загрузка текста из источника

with open('don.txt', encoding='utf-8') as f:
    contents = f.read()

contents

"""## N-gram language models 
По анологии с семинаром где мы пытались генерировать тексты научных статей мы сделаем предобработку текста. В зависимости от источника которым вы пользуетесь 
* Убираем мусор из текста
* Исключаем стоп слова
* Применяем токкенизатор 
"""

import re
clean_text =   re.sub(r'[\t\n\xa0+#$%&()*\+–/:/;<=>@*\[\]^_`{|}~„“«»†*\—/\-‘’IХ]',  ' ', contents)
clean_text = " ".join(clean_text.split())
clean_text

from nltk.corpus import stopwords
stop = stopwords.words('russian')
print(stop)

from collections import Counter
  
splitter = clean_text.split()
splitter = [i for i in splitter if  i not in stop and i.lower()==i and i not in ['.',',']]
Counter = Counter(splitter)

least_common = most_freq = Counter.most_common()[::-1]

print(least_common)

less_freq_list = []
for i in least_common[:30]:
  less_freq_list.append(i[0])

stop_words = stop+less_freq_list
print(stop_words)

!pip install yargy

import yargy
from yargy.tokenizer import MorphTokenizer

tknzr = MorphTokenizer()
clean_text = ' '.join([_.value for _ in tknzr(clean_text) if _.value not in less_freq_list and _.value!=' '])
print(clean_text)
len(clean_text)

delimiter = '.'

lines = [x+delimiter for x in clean_text.split(delimiter) ]
lines = [x for x in lines if len(x)>4]

lines[:10]

from nltk import ToktokTokenizer

tokenizer = ToktokTokenizer()
lines = [
    ' '.join(
        tokenizer.tokenize(line.lower())
    ) for line in tqdm(lines)
]
     
print(lines)

lines[0]

"""### Обучение
Далее обучаем n-gram модель для получения вероятностей цепочек слов

### N-Gram Language Model

A language model is a probabilistic model that estimates text probability: the joint probability of all tokens $w_t$ in text $X$: $P(X) = P(w_1, \dots, w_T)$.

It can do so by following the chain rule:
$$P(w_1, \dots, w_T) = P(w_1)P(w_2 \mid w_1)\dots P(w_T \mid w_1, \dots, w_{T-1}).$$ 

The problem with such approach is that the final term $P(w_T \mid w_1, \dots, w_{T-1})$ depends on $n-1$ previous words. This probability is impractical to estimate for long texts, e.g. $T = 1000$.

One popular approximation is to assume that next word only depends on a finite amount of previous words:

$$P(w_t \mid w_1, \dots, w_{t - 1}) = P(w_t \mid w_{t - n + 1}, \dots, w_{t - 1})$$

Such model is called __n-gram language model__ where n is a parameter. For example, in 3-gram language model, each word only depends on 2 previous words. 

$$
    P(w_1, \dots, w_n) = \prod_t P(w_t \mid w_{t - n + 1}, \dots, w_{t - 1}).
$$

You can also sometimes see such approximation under the name of _n-th order markov assumption_.
"""

### Тут необходимо описать класс для подсчета вероятностей n-gram модели

from tqdm import tqdm
from collections import defaultdict, Counter

# special tokens: 
# - unk represents absent tokens, 
# - eos is a special token after the end of sequence

UNK, EOS = "_UNK_", "_EOS_"

def count_ngrams(lines, n):
    """
    Count how many times each word occured after (n - 1) previous words
    :param lines: an iterable of strings with space-separated tokens
    :returns: a dictionary { tuple(prefix_tokens): {next_token_1: count_1, next_token_2: count_2}}

    When building counts, please consider the following two edge cases
    - if prefix is shorter than (n - 1) tokens, it should be padded with UNK. For n=3,
      empty prefix: "" -> (UNK, UNK)
      short prefix: "the" -> (UNK, the)
      long prefix: "the new approach" -> (new, approach)
    - you should add a special token, EOS, at the end of each sequence
      "... with deep neural networks ." -> (..., with, deep, neural, networks, ., EOS)
      count the probability of this token just like all others.
    """
    counts = defaultdict(Counter)
    # counts[(word1, word2)][word3] = how many times word3 occured after (word1, word2)

    for line in tqdm(lines, desc='N-grams'):
      unk_prefix = ' '.join([UNK] * (n - 1))
      eos_suffix = EOS
      tokens = f'{unk_prefix} {line} {eos_suffix}'.split()
      for i in range(n - 1, len(tokens)):
        n_gram = tuple(tokens[i - n + 1: i])
        counts[n_gram].update([tokens[i]])
    
    return counts

# let's test it
dummy_lines = sorted(lines, key=len)[:100]
dummy_counts = count_ngrams(dummy_lines, n=3)

dummy_counts[('_UNK_', 'а')]

"""Once we can count N-grams, we can build a probabilistic language model.
The simplest way to compute probabilities is in proporiton to counts:

$$ P(w_t | prefix) = { Count(prefix, w_t) \over \sum_{\hat w} Count(prefix, \hat w) } $$
"""

class NGramLanguageModel:    
    def __init__(self, lines, n):
        """ 
        Train a simple count-based language model: 
        compute probabilities P(w_t | prefix) given ngram counts
        
        :param n: computes probability of next token given (n - 1) previous words
        :param lines: an iterable of strings with space-separated tokens
        """
        assert n >= 1
        self.n = n
    
        counts = count_ngrams(lines, self.n)
        
        # compute token proabilities given counts
        self.probs = defaultdict(Counter)
        # probs[(word1, word2)][word3] = P(word3 | word1, word2)
        
        # populate self.probs with actual probabilities
        for k,v in tqdm(counts.items()):
          s = sum(v.values())
          for word, cout in v.items():
            self.probs[k][word] = counts[k][word] / s 
            
    def get_possible_next_tokens(self, prefix):
        """
        :param prefix: string with space-separated prefix tokens
        :returns: a dictionary {token : it's probability} for all tokens with positive probabilities
        """
        prefix = prefix.split()
        prefix = prefix[max(0, len(prefix) - self.n + 1):]
        prefix = [ UNK ] * (self.n - 1 - len(prefix)) + prefix
        return self.probs[tuple(prefix)]
    
    def get_next_token_prob(self, prefix, next_token):
        """
        :param prefix: string with space-separated prefix tokens
        :param next_token: the next token to predict probability for
        :returns: P(next_token|prefix) a single number, 0 <= P <= 1
        """
        return self.get_possible_next_tokens(prefix).get(next_token, 0)

"""The process of generating sequences is... well, it's sequential. You maintain a list of tokens and iteratively add next token by sampling with probabilities.

$ X = [] $

__forever:__
* $w_{next} \sim P(w_{next} | X)$
* $X = concat(X, w_{next})$


Instead of sampling with probabilities, one can also try always taking most likely token, sampling among top-K most likely tokens or sampling with temperature. In the latter case (temperature), one samples from

$$w_{next} \sim {P(w_{next} | X) ^ {1 / \tau} \over \sum_{\hat w} P(\hat w | X) ^ {1 / \tau}}$$

Where $\tau > 0$ is model temperature. If $\tau << 1$, more likely tokens will be sampled with even higher probability while less likely tokens will vanish.
"""

### Обучение n-gram модели

def get_next_token(lm, prefix, temperature=1.0):
    """
    return next token after prefix;
    :param temperature: samples proportionally to lm probabilities ^ (1 / temperature)
        if temperature == 0, always takes most likely token. Break ties arbitrarily.
    """
    next_tokens = lm.get_possible_next_tokens(prefix)
    if temperature == 0:
        sorted_next_tokens = dict(
            sorted(tuple(next_tokens.items()), key=lambda x:x[1], 
                   reverse=True)
        )
        next_token = tuple(sorted_next_tokens.items())[0][0]
    else:
        sum_probs = sum([
            prob ** (1 / temperature) for prob in next_tokens.values()
        ])

        next_tokens = {
            token: prob ** (1 / temperature) / sum_probs
            for token, prob in next_tokens.items()
        }
        tokens = list(next_tokens.keys())
        probs = list(next_tokens.values())
        next_token = np.random.choice(tokens, 1, p=probs)[0]
    return next_token

"""## Подсчет Perplexity

### Evaluating language models: perplexity

Perplexity is a measure of how well does your model approximate true probability distribution behind data. __Smaller perplexity = better model__.

To compute perplexity on one sentence, use:
$$
    {\mathbb{P}}(w_1 \dots w_N) = P(w_1, \dots, w_N)^{-\frac1N} = \left( \prod_t P(w_t \mid w_{t - n}, \dots, w_{t - 1})\right)^{-\frac1N},
$$


On the corpora level, perplexity is a product of probabilities of all tokens in all sentences to the power of 1, divided by __total length of all sentences__ in corpora.

This number can quickly get too small for float32/float64 precision, so we recommend you to first compute log-perplexity (from log-probabilities) and then take the exponent.
"""

### Пример из семинара 
import numpy as np 
def perplexity(lm, lines2, min_logprob=np.log(10 ** -7.)):
    """
    :param lines: a list of strings with space-separated tokens
    :param min_logprob: if log(P(w | ...)) is smaller than min_logprop, set it equal to min_logrob
    :returns: corpora-level perplexity - a single scalar number from the formula above
    
    Note: do not forget to compute P(w_first | empty) and P(eos | full_sequence)
    
    PLEASE USE lm.get_next_token_prob and NOT lm.get_possible_next_tokens
    """
    total_length = 0
    log_pp = 0

    for line in tqdm(lines2):
        tokens = [''] + line.split(' ') + [EOS]

        for t in range(1, len(tokens)):
            prefix = ' '.join(tokens[:t])
            log_pp += max(
                min_logprob, np.log(lm.get_next_token_prob(prefix, tokens[t]))
            )
            total_length += 1
    
    return np.exp(-( 1 / total_length) * log_pp)

from sklearn.model_selection import train_test_split
train_lines, test_lines = train_test_split(lines, test_size=0.25, random_state=42)

n = 2
lm = NGramLanguageModel(n=n, lines=train_lines)

ppx = perplexity(lm, test_lines)
print("N = %i, Perplexity = %.5f" % (n, ppx))

"""### Пример генерации текста"""

for n in (1, 2, 3):
    lm = NGramLanguageModel(n=n, lines=train_lines)
    ppx = perplexity(lm, test_lines)
    print("N = %i, Perplexity = %.5f" % (n, ppx))

prefix = 'казак' # Придумайте первые несколько слов для вашего рассказа

for i in range(100):
    prefix += ' ' + get_next_token(lm, prefix, temperature=0.5)
    if prefix.endswith(EOS) or len(lm.get_possible_next_tokens(prefix)) == 0:
        break
prefix = prefix.replace(' ,', ',')

print(prefix)

prefix = 'дон' # Придумайте первые несколько слов для вашего рассказа

for i in range(100):
    prefix += ' ' + get_next_token(lm, prefix, temperature=0.5)
    if prefix.endswith(EOS) or len(lm.get_possible_next_tokens(prefix)) == 0:
        break
prefix = prefix.replace(' ,', ',')
        
print(prefix)

prefix = 'жена' # Придумайте первые несколько слов для вашего рассказа

for i in range(100):
    prefix += ' ' + get_next_token(lm, prefix, temperature=0.5)
    if prefix.endswith(EOS) or len(lm.get_possible_next_tokens(prefix)) == 0:
        break
prefix = prefix.replace(' ,', ',')
        
print(prefix)

"""Текст должен напоминать что-то осознанное

## Генерация с помощью нейронных сетей

По аналогии с семинаром, будем использова библиотеку transformers и предобученную модель gpt2.
"""

!pip install datasets transformers

"""В конце необходимо запушить модель на сайт huggingface, для этого необходимо получить токен
https://huggingface.co/docs/hub/security-tokens
"""

!huggingface-cli login --token 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

# Загружаем данные еще раз без какого-либо препроцессинга так как будем использовать готовый токенайзер

with open('don eng.txt', encoding='utf-8') as f:
    contents = f.read()

import re
contents =   re.sub(r'[\t\n\xa0+#$%&()*\+/:/;<=>@*\[\]^_`{|}~„“«»†*/\‘’IХ]',  ' ', contents)
contents = " ".join(contents.split())
contents

delimiter = '.'

lines = [x+delimiter for x in contents.split(delimiter)]
lines = [x for x in lines if len(x)>4]
lines[:10]

clm_model_checkpoint = "gpt2"
clm_tokenizer_checkpoint = "gpt2"

from transformers import GPT2Tokenizer, AutoModelForCausalLM
tokenizer = GPT2Tokenizer.from_pretrained( "gpt2" ) 
model = AutoModelForCausalLM.from_pretrained('gpt2')

"""Датасет можно можно не подвергать никакой обработке, так как в дальнейшем мы будем использовать предобученый токенайзер 
``` python
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
```
"""

from sklearn.model_selection import train_test_split
train, valid = train_test_split(lines, test_size=0.2)
lm_datasets = {'train' : train, 'valid' : valid}

lm_datasets['train'][2]

from datasets import Dataset
my_dict = {"text": lines}
datasets = Dataset.from_dict(my_dict)
tr_test_datasets = datasets.train_test_split(test_size=0.1)

tr_test_datasets['train'][2]['text']

### todo обучение модели подготовка датасетов для CausalLM
## Все есть в ноутбуке Language_modeling_solved

def tokenize_function(examples):
  for i in range(1):
    print(tokenizer(examples["text"]))
    print(examples["text"])
  
  return tokenizer(examples["text"])

tokenized_datasets = tr_test_datasets.map(tokenize_function, 
                                          batched=True, num_proc=4, remove_columns=["text"])

block_size = 128

from itertools import chain
def group_texts(examples):
    concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()}
    

    total_length = len(concatenated_examples[list(examples.keys())[0]])
    total_length = (total_length // block_size) * block_size
    
    result = {
        k: [t[i : i + block_size] for i in range(0, total_length, block_size)]
        for k, t in concatenated_examples.items()
    }
    result["labels"] = result["input_ids"].copy()
    return result

lm_datasets = tokenized_datasets.map(
    group_texts,
    batched=True,
    batch_size=2000,
    num_proc=4,
)

lm_datasets['train']

from transformers import Trainer, TrainingArguments
training_args = TrainingArguments(
    f"gpt2-author-clm",
    evaluation_strategy = "epoch",
    learning_rate=2e-5,
    weight_decay=0.01,
    logging_steps = 50,
    num_train_epochs = 5,
    push_to_hub=True

)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=lm_datasets['train'],
    eval_dataset=lm_datasets['test']
)

trainer.train()

import math
eval_results = trainer.evaluate()
print(f"Perplexity: {math.exp(eval_results['eval_loss']):.2f}")

trainer.push_to_hub(model_name='gpt2-author-clm')

eval_results

"""### Генерация текста готовой моделью"""

# сюда нужно вставить ваш ник из huggingface 
nick_name = 'DianaG96'

from transformers import pipeline
generator = pipeline(
    'text-generation', 
    model = f'{nick_name}/gpt2-author-clm',
    tokenizer = tokenizer
)

generator('father don flows')

generator('this paper')

generator('the cat')

generator('seized with yearning')



"""После выполнения домашнего задания необходимо отправить ноутбук мне в телеграм: @zaaabik

Также туда выслать ссылку на модель в huggingface в формате: \*ваш_ник\*/gpt2-arxiv-clm
"""